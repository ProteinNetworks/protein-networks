"""Mock for the MongoDB database, used in all tests."""
import pytest
from bson.objectid import ObjectId
import datetime
from pymongo.errors import DuplicateKeyError

data = [{
    'doctype': 'pdbfile',
    'data': [
        'DBREF  1UBQ A    1    76  UNP    P62988   UBIQ_HUMAN       1     76',
        'SEQRES   1 A   76  MET GLN ILE PHE VAL LYS THR LEU THR GLY LYS THR ILE',
        'SEQRES   2 A   76  THR LEU GLU VAL GLU PRO SER ASP THR ILE GLU ASN VAL',
        'SEQRES   3 A   76  LYS ALA LYS ILE GLN ASP LYS GLU GLY ILE PRO PRO ASP',
        'SEQRES   4 A   76  GLN GLN ARG LEU ILE PHE ALA GLY LYS GLN LEU GLU ASP',
        'SEQRES   5 A   76  GLY ARG THR LEU SER ASP TYR ASN ILE GLN LYS GLU SER',
        'SEQRES   6 A   76  THR LEU HIS LEU VAL LEU ARG LEU ARG GLY GLY',
        'FORMUL   2  HOH   *58(H2 O)',
        'HELIX    1  H1 ILE A   23  GLU A   34  1                                  12',
        'HELIX    2  H2 LEU A   56  TYR A   59  5                                   4',
        'SHEET    1 BET 5 GLY A  10  VAL A  17  0',
        'SHEET    2 BET 5 MET A   1  THR A   7 -1',
        'SHEET    3 BET 5 GLU A  64  ARG A  72  1',
        'SHEET    4 BET 5 GLN A  40  PHE A  45 -1',
        'SHEET    5 BET 5 LYS A  48  LEU A  50 -1',
        'CRYST1   50.840   42.770   28.950  90.00  90.00  90.00 P 21 21 21    4',
        'ORIGX1      1.000000  0.000000  0.000000        0.00000',
        'ORIGX2      0.000000  1.000000  0.000000        0.00000',
        'ORIGX3      0.000000  0.000000  1.000000        0.00000',
        'SCALE1      0.019670  0.000000  0.000000        0.00000',
        'SCALE2      0.000000  0.023381  0.000000        0.00000',
        'SCALE3      0.000000  0.000000  0.034542        0.00000',
        'ATOM      1  N   MET A   1      27.340  24.430   2.614  1.00  9.67           N',
        'ATOM      2  CA  MET A   1      26.266  25.413   2.842  1.00 10.38           C',
        'ATOM      3  C   MET A   1      26.913  26.639   3.531  1.00  9.62           C',
        'ATOM      4  O   MET A   1      27.886  26.463   4.263  1.00  9.62           O',
        'ATOM      5  CB  MET A   1      25.112  24.880   3.649  1.00 13.77           C',
        'ATOM      6  CG  MET A   1      25.353  24.860   5.134  1.00 16.29           C',
        'ATOM      7  SD  MET A   1      23.930  23.959   5.904  1.00 17.17           S',
        'ATOM      8  CE  MET A   1      24.447  23.984   7.620  1.00 16.11           C',
        'ATOM      9  N   GLN A   2      26.335  27.770   3.258  1.00  9.27           N',
        'ATOM     10  CA  GLN A   2      26.850  29.021   3.898  1.00  9.07           C',
        'ATOM     11  C   GLN A   2      26.100  29.253   5.202  1.00  8.72           C',
        'ATOM     12  O   GLN A   2      24.865  29.024   5.330  1.00  8.22           O',
        'ATOM     13  CB  GLN A   2      26.733  30.148   2.905  1.00 14.46           C',
        'ATOM     14  CG  GLN A   2      26.882  31.546   3.409  1.00 17.01           C',
        'ATOM     15  CD  GLN A   2      26.786  32.562   2.270  1.00 20.10           C',
        'ATOM     16  OE1 GLN A   2      27.783  33.160   1.870  1.00 21.89           O',
        'ATOM     17  NE2 GLN A   2      25.562  32.733   1.806  1.00 19.49           N',
        'ATOM     18  N   ILE A   3      26.849  29.656   6.217  1.00  5.87           N',
        'ATOM    220  O   LYS A  29      38.020  29.772  10.382  1.00  6.87           O',
        'ATOM    221  CB  LYS A  29      36.193  27.058   9.911  1.00 10.28           C',
        'ATOM    222  CG  LYS A  29      36.153  25.620   9.409  1.00 14.94           C',
        'ATOM    223  CD  LYS A  29      34.758  25.280   8.900  1.00 19.69           C',
        'ATOM    224  CE  LYS A  29      34.793  24.264   7.767  1.00 22.63           C',
        'ATOM    594  N   GLY A  75      41.165  35.531  31.898  0.25 36.31           N',
        'ATOM    595  CA  GLY A  75      41.845  36.550  32.686  0.25 36.07           C',
        'ATOM    596  C   GLY A  75      41.251  37.941  32.588  0.25 36.16           C',
        'ATOM    597  O   GLY A  75      41.102  38.523  31.500  0.25 36.26           O',
        'ATOM    598  N   GLY A  76      40.946  38.472  33.757  0.25 36.05           N',
        'ATOM    599  CA  GLY A  76      40.373  39.813  33.944  0.25 36.19           C',
        'ATOM    600  C   GLY A  76      40.031  39.992  35.432  0.25 36.20           C',
        'ATOM    601  O   GLY A  76      38.933  40.525  35.687  0.25 36.13           O',
        'ATOM    602  OXT GLY A  76      40.862  39.575  36.251  0.25 36.27           O',
        'TER     603      GLY A  76',
        'HETATM  604  O   HOH A  77      45.747  30.081  19.708  1.00 12.43           O',
        'HETATM  605  O   HOH A  78      19.168  31.868  17.050  1.00 12.65           O',
        'HETATM  606  O   HOH A  79      32.010  38.387  19.636  1.00 12.83           O',
        'HETATM  659  O   HOH A 132      38.363  30.369   5.579  0.49 35.45           O',
        'HETATM  660  O   HOH A 133      27.841  46.062  17.589  0.81 32.15           O',
        'HETATM  661  O   HOH A 134      37.667  43.421  17.000  0.50 33.32           O',
        'MASTER      274    0    0    2    5    0    0    6  660    1    0    6',
        'END'
    ],
    '_id': ObjectId('58dbe03fef677d54224a01d9'),
    'pdbref': '1ubq'
}, {
    'pdbref': '1ubq',
    'data':
    [[2, 1, 44], [3, 1, 40], [3, 2, 56], [4, 2, 56], [4, 3, 70], [5, 3, 23],
     [5, 4, 40], [6, 4, 13], [6, 5, 37], [7, 5, 23], [7, 6, 48], [8, 6, 15],
     [8, 7, 46], [9, 6, 1], [9, 7, 43], [9, 8, 40], [10, 6, 13], [10, 7, 22],
     [10, 8, 13], [10, 9, 27], [11, 5, 7], [11, 6, 21], [11, 7, 44],
     [11, 8, 8], [11, 9, 36], [11, 10, 25], [12, 3, 1], [12, 4, 30],
     [12, 5, 33], [12, 6, 37], [12, 7, 20], [12, 10, 14], [12, 11, 52],
     [13, 3, 7], [13, 4, 31], [13, 5, 56], [13, 6, 13], [13, 7, 12],
     [13, 11, 38], [13, 12, 44], [14, 2, 27], [14, 3, 23], [14, 4, 46],
     [14, 5, 18], [14, 12, 19], [14, 13, 48], [15, 1, 10], [15, 2, 28],
     [15, 3, 54], [15, 4, 19], [15, 5, 17], [15, 13, 37], [15, 14, 47],
     [16, 1, 32], [16, 2, 38], [16, 3, 17], [16, 14, 11], [16, 15, 48],
     [17, 1, 53], [17, 2, 20], [17, 3, 33], [17, 15, 34], [17, 16, 40],
     [18, 1, 47], [18, 16, 7], [18, 17, 52], [19, 1, 25], [19, 17, 20],
     [19, 18, 53], [20, 1, 1], [20, 17, 1], [20, 18, 38], [20, 19, 39],
     [21, 16, 4], [21, 17, 29], [21, 18, 45], [21, 19, 34], [21, 20, 46],
     [22, 18, 1], [22, 19, 3], [22, 20, 16], [22, 21, 46], [23, 21, 16],
     [23, 22, 48], [24, 21, 1], [24, 22, 42], [24, 23, 39], [25, 17, 5],
     [25, 21, 38], [25, 22, 44], [25, 23, 23], [25, 24, 44], [26, 3, 6],
     [26, 5, 2], [26, 15, 17], [26, 17, 14], [26, 18, 1], [26, 21, 17],
     [26, 22, 22], [26, 23, 46], [26, 24, 25], [26, 25, 49], [27, 15, 1],
     [27, 22, 2], [27, 23, 37], [27, 24, 39], [27, 25, 27], [27, 26, 48],
     [28, 23, 2], [28, 24, 16], [28, 25, 31], [28, 26, 21], [28, 27, 27],
     [29, 13, 2], [29, 15, 38], [29, 16, 18], [29, 17, 22], [29, 18, 2],
     [29, 21, 12], [29, 24, 2], [29, 25, 48], [29, 26, 46], [29, 27, 25],
     [29, 28, 35], [30, 5, 14], [30, 13, 20], [30, 15, 21], [30, 25, 2],
     [30, 26, 30], [30, 27, 42], [30, 28, 27], [30, 29, 46], [31, 13, 1],
     [31, 26, 2], [31, 27, 20], [31, 28, 37], [31, 29, 22], [31, 30, 39],
     [32, 27, 2], [32, 28, 19], [32, 29, 33], [32, 30, 22], [32, 31, 51],
     [33, 13, 32], [33, 14, 22], [33, 15, 25], [33, 16, 1], [33, 28, 2],
     [33, 29, 23], [33, 30, 40], [33, 31, 25], [33, 32, 41], [34, 7, 3],
     [34, 11, 21], [34, 13, 30], [34, 29, 3], [34, 30, 32], [34, 31, 27],
     [34, 32, 16], [34, 33, 60], [35, 30, 10], [35, 31, 30], [35, 32, 11],
     [35, 33, 12], [35, 34, 24], [36, 7, 2], [36, 13, 2], [36, 27, 3],
     [36, 30, 39], [36, 31, 46], [36, 32, 3], [36, 33, 1], [36, 34, 41],
     [36, 35, 32], [37, 27, 3], [37, 31, 41], [37, 35, 19], [37, 36, 50],
     [38, 24, 5], [38, 27, 49], [38, 28, 16], [38, 30, 1], [38, 31, 37],
     [38, 36, 23], [38, 37, 44], [39, 27, 6], [39, 36, 2], [39, 37, 37],
     [39, 38, 42], [40, 36, 31], [40, 37, 57], [40, 38, 28], [40, 39, 55],
     [41, 26, 7], [41, 27, 61], [41, 28, 6], [41, 29, 1], [41, 30, 33],
     [41, 31, 14], [41, 35, 1], [41, 36, 40], [41, 37, 30], [41, 38, 50],
     [41, 39, 29], [41, 40, 44], [42, 27, 12], [42, 38, 1], [42, 39, 1],
     [42, 40, 12], [42, 41, 35], [43, 5, 10], [43, 23, 18], [43, 26, 14],
     [43, 27, 33], [43, 30, 10], [43, 41, 34], [43, 42, 50], [44, 42, 43],
     [44, 43, 45], [45, 43, 9], [45, 44, 45], [46, 44, 15], [46, 45, 50],
     [47, 44, 20], [47, 45, 19], [47, 46, 19], [48, 43, 6], [48, 44, 32],
     [48, 45, 51], [48, 46, 43], [48, 47, 36], [49, 42, 53], [49, 43, 32],
     [49, 44, 39], [49, 45, 10], [49, 47, 10], [49, 48, 38], [50, 23, 35],
     [50, 27, 6], [50, 42, 5], [50, 43, 55], [50, 44, 33], [50, 45, 33],
     [50, 46, 1], [50, 48, 29], [50, 49, 54], [51, 22, 2], [51, 23, 29],
     [51, 24, 3], [51, 27, 4], [51, 43, 1], [51, 49, 17], [51, 50, 39],
     [52, 22, 17], [52, 23, 56], [52, 24, 54], [52, 25, 3], [52, 27, 26],
     [52, 38, 1], [52, 50, 14], [52, 51, 49], [53, 22, 18], [53, 23, 17],
     [53, 24, 14], [53, 51, 22], [53, 52, 22], [54, 21, 6], [54, 22, 26],
     [54, 23, 36], [54, 24, 3], [54, 50, 5], [54, 51, 57], [54, 52, 28],
     [54, 53, 44], [55, 19, 19], [55, 20, 25], [55, 21, 28], [55, 22, 33],
     [55, 23, 23], [55, 51, 1], [55, 52, 2], [55, 53, 12], [55, 54, 47],
     [56, 1, 13], [56, 3, 11], [56, 17, 17], [56, 18, 21], [56, 19, 45],
     [56, 20, 19], [56, 21, 38], [56, 22, 23], [56, 23, 28], [56, 26, 15],
     [56, 43, 1], [56, 50, 5], [56, 54, 9], [56, 55, 45], [57, 1, 1],
     [57, 18, 2], [57, 19, 30], [57, 20, 14], [57, 21, 3], [57, 54, 1],
     [57, 55, 38], [57, 56, 33], [58, 19, 2], [58, 53, 4], [58, 54, 50],
     [58, 55, 49], [58, 56, 27], [58, 57, 44], [59, 23, 21], [59, 45, 31],
     [59, 46, 1], [59, 48, 40], [59, 49, 16], [59, 50, 57], [59, 51, 30],
     [59, 52, 1], [59, 54, 40], [59, 55, 30], [59, 56, 42], [59, 57, 31],
     [59, 58, 66], [60, 1, 1], [60, 45, 21], [60, 55, 1], [60, 56, 14], [60, 57, 23],
     [60, 58, 18], [60, 59, 39], [61, 1, 18], [61, 3, 14], [61, 17, 1],
     [61, 19, 9], [61, 23, 3], [61, 45, 50], [61, 50, 9], [61, 55, 4],
     [61, 56, 54], [61, 57, 24], [61, 58, 4], [61, 59, 48], [61, 60, 48],
     [62, 1, 20], [62, 2, 4], [62, 3, 8], [62, 19, 2], [62, 45, 6],
     [62, 59, 1], [62, 60, 40], [62, 61, 44], [63, 1, 40], [63, 2, 24],
     [63, 3, 12], [63, 4, 2], [63, 61, 11], [63, 62, 54], [64, 1, 12],
     [64, 2, 54], [64, 3, 27], [64, 4, 51], [64, 62, 17], [64, 63, 64],
     [65, 1, 6], [65, 2, 10], [65, 3, 36], [65, 4, 39], [65, 5, 2],
     [65, 45, 22], [65, 60, 2], [65, 61, 24], [65, 62, 24], [65, 63, 23],
     [65, 64, 35], [66, 3, 16], [66, 4, 54], [66, 5, 20], [66, 6, 21],
     [66, 12, 5], [66, 44, 4], [66, 45, 27], [66, 46, 1], [66, 61, 1],
     [66, 62, 1], [66, 64, 15], [66, 65, 36], [67, 3, 24], [67, 4, 30],
     [67, 5, 45], [67, 6, 24], [67, 7, 1], [67, 15, 2], [67, 23, 1],
     [67, 26, 5], [67, 30, 1], [67, 43, 33], [67, 44, 32], [67, 45, 46],
     [67, 50, 12], [67, 56, 5], [67, 61, 16], [67, 65, 21], [67, 66, 49],
     [68, 4, 2], [68, 5, 16], [68, 6, 65], [68, 7, 8], [68, 8, 5],
     [68, 42, 11], [68, 43, 27], [68, 44, 62], [68, 45, 18], [68, 46, 1],
     [68, 66, 38], [68, 67, 57], [69, 5, 27], [69, 6, 27], [69, 7, 42],
     [69, 8, 22], [69, 13, 2], [69, 27, 2], [69, 30, 16], [69, 34, 1],
     [69, 36, 13], [69, 40, 4], [69, 41, 36], [69, 42, 34], [69, 43, 41],
     [69, 44, 14], [69, 67, 13], [69, 68, 39], [70, 6, 1], [70, 7, 4],
     [70, 8, 27], [70, 40, 7], [70, 41, 18], [70, 42, 70], [70, 43, 17],
     [70, 44, 15], [70, 68, 20], [70, 69, 49], [71, 7, 1], [71, 8, 7],
     [71, 36, 20], [71, 37, 3], [71, 40, 50], [71, 41, 29], [71, 42, 26],
     [71, 69, 37], [71, 70, 49], [72, 27, 3], [72, 38, 5], [72, 39, 48],
     [72, 40, 71], [72, 41, 36], [72, 42, 38], [72, 43, 1], [72, 49, 8],
     [72, 70, 17], [72, 71, 44], [73, 36, 1], [73, 40, 47], [73, 71, 37],
     [73, 72, 53], [74, 39, 25], [74, 40, 10], [74, 72, 21], [74, 73, 38],
     [75, 73, 20], [75, 74, 25], [76, 73, 2], [76, 74, 5], [76, 75, 19]],
    'doctype': 'edgelist',
    'edgelisttype': 'residue',
    'hydrogenstatus': 'noH',
    '_id': ObjectId('58dbe03fef677d54224a01da'),
    'date': datetime.datetime(2017, 3, 29, 16, 26, 39, 894000),
    'scaling': 4.5
}, {
    'pdbref': '1ubq',
    'data': [[
        3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
        4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 4, 2, 2, 2, 2,
        2, 2, 2, 2
    ], [
        37, 38, 35, 34, 68, 70, 71, 74, 75, 76, 73, 72, 69, 42, 36, 45, 39, 12,
        10, 17, 5, 8, 2, 9, 62, 60, 57, 65, 61, 58, 59, 66, 63, 64, 67, 23, 28,
        26, 29, 21, 19, 22, 47, 49, 46, 55, 56, 54, 53, 50, 14, 11, 18, 7, 6,
        3, 15, 13, 1, 16, 4, 44, 43, 41, 40, 52, 48, 51, 20, 27, 25, 24, 30,
        31, 32, 33
    ]],
    'doctype': 'partition',
    'N': 10,
    'edgelistid': ObjectId('58dbe03fef677d54224a01da'),
    '_id': ObjectId('58dbe045ef677d54224a01dc'),
    'detectionmethod': 'Infomap',
    'date': datetime.datetime(2017, 3, 29, 16, 26, 45, 623000)
}, {
    'pdbref': '2vcr',
    'data':
    [[2, 1, 44], [3, 1, 40], [3, 2, 56], [4, 2, 56], [4, 3, 70], [5, 3, 23]],
    'doctype': 'edgelist',
    'edgelisttype': 'residue',
    'hydrogenstatus': 'noH',
    '_id': ObjectId('58dcf13fef677d54224a01da'),
    'date': datetime.datetime(2017, 3, 29, 16, 26, 39, 894000),
    'scaling': 4.5
}]


@pytest.fixture(autouse=True)
def mock_database(monkeypatch):
    """Monkeypatch the pymongo.client() and adds some test data."""
    class Garry:
        """The mock MongoClient. Does nothing, simply returns."""

        def __init__(self, inputString, serverSelectionTimeoutMS):
            pass

        class admin:
            """
            The admin.command which is used solely to test the connection.

            Again, just return (for now)
            """

            def command(inputString):
                print("Garry used instead of database")

            pass

        class proteinnetworks:
            """The proteinnetworks "database"."""

            class proteinnetworks:
                """
                The proteinnetworks "collection".

                This is where, in the real system, the data is stored.
                """

                def find(query):
                    """
                    Pretend to extract a protein.

                    Query is a dictionary. If all the keys match any of the records stored here,
                    then return the record(s).
                    """
                    global data  # contains a pdbfile, edgelist and partition for 1ubq

                    results = []
                    for doc in data:
                        match = True
                        counter = 0
                        for key in query:
                            if key not in doc:
                                continue
                            counter += 1
                            if doc[key] != query[key]:
                                match = False
                        if match and counter:
                            results.append(doc)

                    class Cursor:
                        def __init__(self, doc):
                            self.doc = doc
                            pass

                        def count(self):
                            return len(self.doc)

                        def __getitem__(self, i):
                            return self.doc[i]

                    return Cursor(results)

                def count():
                    global data
                    return len(data)

                def insert_one(doc):
                    """
                    Pretend to add the document to the database.

                    Throw an error if the document is already there, otherwise
                    return a class within a "inserted_id".
                    """
                    results = []
                    for datum in data:
                        match = True
                        counter = 0
                        for key in doc:
                            if key not in datum or key == "date" or key == "data":
                                continue
                            counter += 1
                            if doc[key] != datum[key]:
                                match = False
                        if match and counter:
                            results.append(doc)
                    if results:
                        raise DuplicateKeyError("bla")
                    else:
                        class Result:
                            def __init__(self):
                                self.inserted_id = ObjectId("58dbe045ef677d54224a01d2")
                        return Result()

                def find_one(doc):
                    """Return the document matching the given query."""
                    global data
                    for datum in data:
                        match = True
                        counter = 0
                        for key in doc:
                            if key not in datum:
                                continue
                            counter += 1
                            if doc[key] != datum[key]:
                                match = False
                        if match and counter:
                            return datum

    monkeypatch.setattr("pymongo.MongoClient", Garry)


@pytest.fixture(autouse=True)
def mock_urlopen(monkeypatch):
    """Monkeypatch the pymongo.client() and adds some test data."""
    class mockurlopen:
        def __init__(self, anyarg):
            pass

        def readlines(self):
            pdbdata = [b'ATOM      1  N   MET A   1      27.340  24.430   2.614  1.00  9.67           N',
                       b'ATOM      3  C   MET A   1      26.913  26.639   3.531  1.00  9.62           C',
                       b'ATOM      2  CA  MET A   1      26.266  25.413   2.842  1.00 10.38           C',
                       b'ATOM      4  O   MET A   1      27.886  26.463   4.263  1.00  9.62           O',
                       b'ATOM      5  CB  MET A   1      25.112  24.880   3.649  1.00 13.77           C',
                       b'ATOM      6  CG  MET A   1      25.353  24.860   5.134  1.00 16.29           C',
                       b'ATOM      7  SD  MET A   1      23.930  23.959   5.904  1.00 17.17           S',
                       b'ATOM      8  CE  MET A   1      24.447  23.984   7.620  1.00 16.11           C',
                       b'ATOM      9  N   GLN A   2      26.335  27.770   3.258  1.00  9.27           N',
                       b'ATOM     10  CA  GLN A   2      26.850  29.021   3.898  1.00  9.07           C',
                       b'ATOM     11  C   GLN A   2      26.100  29.253   5.202  1.00  8.72           C']
            return pdbdata

    monkeypatch.setattr("urllib.request.urlopen", mockurlopen)


@pytest.fixture(autouse=True)
def mock_subprocess(monkeypatch):
    """Patch subprocess to avoid calling Infomap."""
    def writetempfile(array):
        with open("temp.tree", mode='w') as flines:
            flines.write("""# 'temp.dat . -i link-list --tree -N 1' -> 76 nodes partitioned in 0s from codelength 6.148295862 in one level to codelength 5.340246382 in 2 levels.
# path flow name node:
1:1 0.0207778 "4" 4
1:2 0.0205627 "3" 3
1:3 0.0171212 "15" 15
1:4 0.0156156 "1" 1
1:5 0.0155296 "2" 2
1:6 0.0146692 "17" 17
1:7 0.0120451 "65" 65
1:8 0.01183 "64" 64
1:9 0.0112277 "14" 14
1:10 0.00989418 "63" 63
1:11 0.00950701 "62" 62
1:12 0.00929192 "16" 16
2:1 0.0180246 "69" 69
2:2 0.0179386 "67" 67
2:3 0.0167771 "5" 5
2:4 0.0161318 "13" 13
2:5 0.0158737 "68" 68
2:6 0.0144541 "6" 6
2:7 0.0137228 "7" 7
2:8 0.0123892 "66" 66
2:9 0.0109696 "12" 12
2:10 0.0108406 "11" 11
2:11 0.00787232 "8" 8
2:12 0.00632367 "9" 9
2:13 0.00490407 "10" 10
3:1 0.021251 "59" 59
3:2 0.0200034 "56" 56
3:3 0.0164329 "61" 61
3:4 0.0156156 "21" 21
3:5 0.0153575 "55" 55
3:6 0.0120881 "19" 19
3:7 0.0115719 "18" 18
3:8 0.0113568 "58" 58
3:9 0.0104964 "57" 57
3:10 0.00890476 "60" 60
3:11 0.00856061 "20" 20
4:1 0.0205627 "27" 27
4:2 0.0205627 "23" 23
4:3 0.016648 "26" 26
4:4 0.0151424 "54" 54
4:5 0.0147552 "22" 22
4:6 0.0135077 "25" 25
4:7 0.0123462 "24" 24
4:8 0.011744 "52" 52
4:9 0.0109266 "51" 51
4:10 0.00658178 "53" 53
5:1 0.018842 "45" 45
5:2 0.0187989 "43" 43
5:3 0.0171642 "44" 44
5:4 0.0168631 "50" 50
5:5 0.0168201 "42" 42
5:6 0.0126473 "70" 70
5:7 0.011916 "49" 49
5:8 0.01183 "48" 48
5:9 0.00563538 "46" 46
5:10 0.00447389 "47" 47
6:1 0.0216811 "41" 41
6:2 0.0178956 "40" 40
6:3 0.0148413 "72" 72
6:4 0.0130345 "71" 71
6:5 0.0129915 "38" 38
6:6 0.0122172 "37" 37
6:7 0.0105394 "39" 39
6:8 0.00851759 "73" 73
6:9 0.00533425 "74" 74
6:10 0.00275316 "75" 75
6:11 0.00111847 "76" 76
7:1 0.0191431 "30" 30
7:2 0.0168631 "31" 31
7:3 0.0162609 "29" 29
7:4 0.0150133 "36" 36
7:5 0.0122172 "33" 33
7:6 0.0110987 "34" 34
7:7 0.0102813 "28" 28
7:8 0.00851759 "32" 32
7:9 0.00597952 "35" 35
""")
    monkeypatch.setattr("subprocess.run", writetempfile)


@pytest.fixture(autouse=True)
def mock_matplotlib(monkeypatch):
    """
    Patch matplotlib to avoid stalling the tests.

    FIXME should check this actually gets called
    """
    def show():
        print("Mock plot used")
    monkeypatch.setattr("matplotlib.pyplot.show", show)
